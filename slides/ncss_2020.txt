---
author:
- Gary Reynolds (Optiver)
- Edwin Steele (Optiver)

title: üî• Firelocs NCSS Masterclass (2020)
subtitle: A web service for bushfire data
...

---

# What is this about?

* Building/adapting a data-centric web service
* Integrating with a third-party data source
* Present information in several forms for humans
* Sharing data suitable for integration with other tools

---

# What is this about?

![NSW Rural Fire Service - Fires Near Me](images/fires-near-me.png){ width=90% }

---

# Skills you can learn in this masterclass

* Using and reworking data from a third-party webservice _(consuming a data source using Python)_
* Publishing data in multiple formats for a browser using templates _(Django templating)_
* Publishing data so that it can be consumed by other software _(publishing an API using Python)_

---

# Resources are on Github

* Project and code: <https://github.com/goodtune/firelocs>
* These slides: <https://goodtune.github.io/firelocs>

![_follow along!_](images/slides-qr.png){ width=15% }

---

# Our company, Optiver

* Optiver trades most stock and futures markets worldwide
* We write our own auto-trading algorithms 
* We're based in Sydney, Chicago, Shanghai and Amsterdam
* <https://optiver.com>

---

# Our backgrounds

* We both run teams of engineers at Optiver
* Gary builds software in Python and C++ to manage our production environment _(Github: @goodtune)_
  * Went to Gosford High, then Sydney Uni to do Bachelor of Computer Science & Technology.
* Edwin builds software for our Tax and Finance departments _(Github: @edwinsteele)_
  * Went to St Pauls Grammar (Penrith) and Macarthur Anglican (Camden), then Sydney Uni to do a Bachelor of Science (Comp.Sci + Maths)

---

# Structure for this morning

* Background _(this stuff)_
* Structure of a web app
* High level description of the activities _(so you can go at your own pace - use the slides!)_
* We'll run through the details of an activity when enough people are ready 
* Ask us questions whenever - we're here for you! :-)
* Question time at the end _(about this, about tech, about careers, about Optiver, whatever...)_

---

# How about you?

Let's go around the room:

* Your school and what you had for dinner last night _(was it good?)_
* Have you done any programming before this week?
* Is there anything you're hoping to learn in this master class?

---

# Activities

1. Setup your environment and display data in your browser (machine readable and human readable)
1. Add fire status to the list of fires
1. Populate additional fields from the RFS data feed
3. Fix a partially implemented view that drills down by council area
4. Create a new view that drills down by alert level
5. Display fires as points on a map

---

# What we've created as a foundation

* A web service in Python, using the popular Django framework
* An importer that creates "incidents" in a database from RFS data
* Two web _views_ based on the incidents stored in the database:
  * a basic list of incidents for humans to read using Django _templates_
  * A machine-readable list of incidents for software to consume _(an API)_

---

# Setup your environment and display data in your browser

* git clone https://github.com/goodtune/firelocs.git
* Follow instructions at https://github.com/goodtune/firelocs

---

# Structure of a Django Web App

![From _https://fleschenberg.net/django-architecture-diagram/_](images/django-architecture.jpg){ width=75% }

---

# Structure of a Django Web App - Model/ORM

How we describe the properties of a thing: `firelocs/models.py`

	class Incident(models.Model):

	    id = models.URLField(primary_key=True)
	    published = models.DateTimeField()
	    title = models.CharField(max_length=255)

	    location = models.CharField(max_length=255)
	    council_area = models.CharField(max_length=255)
	    alert_level = models.CharField(max_length=255)

	    latitude = models.DecimalField(max_digits=20, decimal_places=16)
	    longitude = models.DecimalField(max_digits=20, decimal_places=16)

	    fire_status = models.CharField(max_length=255)
	    fire_type = models.CharField(max_length=255)
	    fire_size = models.PositiveIntegerField()
	    fire_agency = models.CharField(max_length=255)

---

# Structure of a Django Web App - URL routing

How we map a URL to the code that generates the response: `firelocs/urls.py`

	urlpatterns = [
	    path("", FireList.as_view()),
	    path("json/", FireListJson.as_view()),
	]

---

# Structure of a Django Web App - View/Middleware

The code that actually generates the response: `firelocs/views.py`

	class FireList(ListView):
	    model = Incident


	class FireListJson(BaseListView, View):
	    model = Incident

	    def render_to_response(self, context, **response_kwargs):
	        data = {each["id"]: each for each in self.get_queryset().values()}
	        return JsonResponse(data)

---

# Structure of a Django Web App - Template

Templates are helpers to make HTML - Hooked up to the FireList view `firelocs/templates/firelocs/incident_list.html`

       <table>
          <thead>
             <tr>
                <th>Where</th>
                <th>Alert Level</th>
             </tr>
           </thead>
           <tbody>
             {% for object in object_list %}
             <tr>
                <th>{{ object.location }}</th>
                <td>{{ object.alert_level }}</th>
             </tr>
             {% empty %}
             <tr class="empty">
               <td colspan="2">No fires to list.</td>
             </tr>
             {% endfor %}
           </tbody>
        </table>

---

# Structure of a Django Web App - SQL Database

The SQL database stores all the information to be loaded into Django models. `db.sqlite3`

	$ sqlite3 -header -column db.sqlite3 "pragma table_info('firelocs_incident')"
	cid         name        type          notnull     dflt_value  pk
	----------  ----------  ------------  ----------  ----------  ----------
	0           id          varchar(200)  1                       1
	1           published   datetime      1                       0
	2           title       varchar(255)  1                       0
	3           location    varchar(255)  1                       0
	4           council_ar  varchar(255)  1                       0
	5           alert_leve  varchar(255)  1                       0
	6           fire_statu  varchar(255)  1                       0
	7           fire_type   varchar(255)  1                       0
	8           fire_size   integer unsi  1                       0
	9           fire_agenc  varchar(255)  1                       0


---

# Structure of a Django Web App

![From _https://fleschenberg.net/django-architecture-diagram/_](images/django-architecture.jpg){ width=75% }

---

# Add fire status to the list of fires

* Remembering the Django architecture:
  1. URL Routing `firelocs/urls.py` _leads to_
  1. A view `firelocs/views.py`  _which may use_
  1. A template (look under `firelocs/templates/firelocs`)
* Look in the model `firelocs/models.py` for the fields that you could include in the template

---

# Populate additional fields from the RFS data feed

::: incremental

* Alert level and Fire Status are exposed in the model. Let's look at the json URL to see their values
* They're null - we populate the database using the import_fires command so make adjustments in `firelocs/management/commands/import_fires.py`
* Check `data/demonstration.xml` for fields (and try some print statements to see what import_fires sees)
  * Alert Level can come from two places (it is also called _Category_)
* Check the json URL to confirm whether the values are coming through
* Use them in your `incidents_list.html` template (if you'd like the practice)

:::

---

# Fix a partially implemented view that drills down by council area

This view code is in: `firelocs/views.py`

	def drill_down_list(request, council_area=None):
	    object_list = Incident.objects.all()
	    context = {
	        "object_list": object_list,
	        "council_area": council_area,
	    }
	    return TemplateResponse(request, "firelocs/incident_drill.html", context)

* Launch [http://localhost:8000/council/](http://localhost:8000/council/)

* Fix the following bugs üêõ:
  * duplicate council areas are listed
  * the filtering isn't actually working!

---

# Create a new view that drills down by alert level

* Based on what we learnt in the previous activity, hook up a view that filters by alert level.
* If you're feeling particularly confident, you could also filter by both council area AND alert level.

---

# Display fires as points on a map

* We will use LeafletJS (<https://leafletjs.com>) for mapping
* There is a "maps" URL which uses a template: `firelocs/templates/firelocs/map_model.html`
* Edit this template to iterate through all the incidents and add them in the specified format

---

# Display fires as points on a map (cont.)

* Create a helpful description to be used when you click on the marker _(the popup)_
* Use the icon styles to differentiate fires by alert level
  * You could use conditional logic in the template (<https://docs.djangoproject.com/en/3.0/ref/templates/language/#tags>)
  * A better approach is a method on the model that specifies the icon type based on alert level

---

# Extension activity

_(in case you'd like to go further or finish early)_

* Create a sortable table using JQuery/Datatables <https://www.datatables.net/examples/data_sources/js_array.html>
* Create a template where LeafletJS reads from the JSON API

---

# General advice

* Separate presentation logic from "business" logic
* Don't reinvent the wheel - mature libraries help you build stuff more quickly
  * Sometimes it won't be a perfect fit but they can still be valuable
  * Features trickle down
  * But sometimes building is a great way to learn from first principles

---

# General advice - Don't reinvent the wheel

* When writing web services, consider a mature framework like Django and its add-ons
* Built-in functionality includes:
  * Form handling
  * Exposing an API
  * Specialised database columns like times, location (spatial) data, ranges
* Helpful webby libraries to consider: datatables, leaflet, bootstrap

---

# What we saw on the way

* It's hard to get important data from the RFS feed (see `import_fires.py`)
  * Consider your users when designing APIs
* Mature libraries and feeds can have problems. Nobody is perfect (we found one while building this)
  * Contribute a fix!

---

# Question time!

* about this
* about tech
* about careers
* about Optiver
* whatever...

---

# Thanks!

---

# List of technologies used

* Django (Python Web Framework)
* Feedparser (Python RSS/Atom parsing library)
* LeafletJS (Javascript mapping library)
* Pandoc + Slidy (Slide generation)
* Git (Version control)
* Github (development workflow)
