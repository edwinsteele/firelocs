---
author:
- Gary Reynolds (Optiver)
- Edwin Steele (Optiver)

title: ðŸ”¥ Firelocs NCSS Masterclass (2020)
subtitle: A web service for bushfire data
...

---

# What is this about?

* Building/adapting a data-centric web service
* Present information in several forms for humans
* Sharing data suitable for integration with other tools

---

# Skills you can learn in this masterclass

* Using and reworking data from a third-party webservice _(consuming a data source using Python)_
* Publishing data in multiple formats for a browser using templates _(Django templating)_
* Publishing data so that it can be consumed by other software _(publishing an API using Python)_

---

# Resources are on Github

* Project and code: <https://github.com/goodtune/firelocs>
* These slides: <https://goodtune.github.com/firelocs> (follow along!)

---

# Our company, Optiver

* Optiver trades most stock and futures markets worldwide
* We write our own auto-trading algorithms 
* We're based in Sydney, Chicago, Shanghai and Amsterdam
* <https://optiver.com>

---

# Our backgrounds

* We both run teams of engineers at Optiver
* Gary builds software in Python and C++ to manage our production environment _(Github: @goodtune)_
  * Went to Gosford High, then Sydney Uni to do Bachelor of Computer Science & Technology.
* Edwin builds software for our Tax and Finance departments _(Github: @edwinsteele)_
  * Went to St Pauls Grammar (Penrith) and Macarthur Anglican (Camden), then Sydney Uni to do a Bachelor of Science (Comp.Sci + Maths)

---

# Structure for this morning

* Background _(this stuff)_
* Structure of a web app
* High level description of the activities _(so you can go at your own pace - use the slides!)_
* We'll run through the details of an activity when enough people are ready 
* Ask us questions during the morning - we're here for you! :-)
* 20 minutes of questions at the end _(about this, about tech, about careers, about Optiver, whatever...)_

---

# How about you?

Let's go around the room:

* Your school and what you had for dinner last night (was it good?)
* Have you done any programming before this week?
* Is there anything you're hoping to learn in this master class?

---

# Activities

1. Setup your environment and display data in your browser (machine readable and human readable)
2. Add fire status to the list of fires
3. Add a view to drill down by alert level  _*Is this too complicated?*_
4. Add latitude and longitude to the machine-readable feed
5. Connect the map to the machine-readable feed

---

# What we've created as a foundation

* A web service in Python, using the popular Django framework
* An importer that creates "incidents" in a database from RFS data
* Two web _views_ based on the incidents stored in the database:
  * a basic list of incidents for humans to read using Django _templates_
  * A machine-readable list of incidents for software to consume _(an API)_

---

# Setup your environment and display data in your browser

* git clone https://github.com/goodtune/firelocs.git
* Follow instructions at https://github.com/goodtune/firelocs

---

# Structure of a Django Web App

![From _https://fleschenberg.net/django-architecture-diagram/_](images/django-architecture.jpg){ width=75% }

---

# Structure of a Django Web App - Model/ORM

How we describe the properties of a thing: `firelocs/models.py`

	class Incident(models.Model):

	    id = models.URLField(primary_key=True)
	    published = models.DateTimeField()
	    title = models.CharField(max_length=255)

	    location = models.CharField(max_length=255)
	    council_area = models.CharField(max_length=255)
	    alert_level = models.CharField(max_length=255)

	    latitude = models.DecimalField(max_digits=20, decimal_places=16, null=True)
	    longitude = models.DecimalField(max_digits=20, decimal_places=16, null=True)

	    fire_status = models.CharField(max_length=255)
	    fire_type = models.CharField(max_length=255)
	    fire_size = models.PositiveIntegerField()
	    fire_agency = models.CharField(max_length=255)

---

# Structure of a Django Web App - URL routing

How we map a URL to the code that generates the response: `firelocs/urls.py`

	urlpatterns = [
	    path("", FireList.as_view()),
	    path("json/", FireListJson.as_view()),
	]

---

# Structure of a Django Web App - View/Middleware

The code that actually generates the response: `firelocs/views.py`

	class FireList(ListView):
	    model = Incident


	class FireListJson(BaseListView, View):
	    model = Incident

	    def render_to_response(self, context, **response_kwargs):
	        data = {each["id"]: each for each in self.get_queryset().values()}
	        return JsonResponse(data)

---

# Structure of a Django Web App - Template

Templates are helpers to make HTML - Hooked up to the FireList view `firelocs/templates/firelocs/incident_list.html`

       <table>
          <thead>
             <tr>
                <th>Where</th>
                <th>Alert Level</th>
             </tr>
           </thead>
           <tbody>
             {% for object in object_list %}
             <tr>
                <th>{{ object.location }}</th>
                <td>{{ object.alert_level }}</th>
             </tr>
             {% empty %}
             <tr class="empty">
               <td colspan="2">No fires to list.</td>
             </tr>
             {% endfor %}
           </tbody>
        </table>

---

# Structure of a Django Web App - SQL Database

The SQL database stores all the information to be loaded into Django models. `db.sqlite3`

	$ sqlite3 -header -column db.sqlite3 "pragma table_info('firelocs_incident')"
	cid         name        type          notnull     dflt_value  pk
	----------  ----------  ------------  ----------  ----------  ----------
	0           id          varchar(200)  1                       1
	1           published   datetime      1                       0
	2           title       varchar(255)  1                       0
	3           location    varchar(255)  1                       0
	4           council_ar  varchar(255)  1                       0
	5           alert_leve  varchar(255)  1                       0
	6           fire_statu  varchar(255)  1                       0
	7           fire_type   varchar(255)  1                       0
	8           fire_size   integer unsi  1                       0
	9           fire_agenc  varchar(255)  1                       0


---

# Structure of a Django Web App

![From _https://fleschenberg.net/django-architecture-diagram/_](images/django-architecture.jpg){ width=75% }

---

# Add fire status to the list of fires

* ...

---

# Add a view to drill down by alert level

* ...

---

# Add latitude and longitude to the machine-readable feed

* ...

---

# Connect the map to the machine-readable feed

* ...


---

# A step beyond...

* Infinite design possibilities, but some patterns work better than others

---

# API design

_something about the RFS data stream with its CDATA and what they could have done better_

---

# Consume the model or from the API

_we can do a map using a model and iterating over the entries, or we can consume the API. Why would you do one over another?_

---

# Don't reinvent the wheel

_use off the shelf where you can, even if it means making a few compromises. maintainers will love it. you get features for free_
e.g. datatables, leaflet, bootstrap

---

# Don't reinvent the wheel

* When writing web services, consider a mature framework like Django and its add-ons
* Built-in functionality includes:
  * Form handling
  * Exposing an API
  * Specialised database columns like times, location (spatial) data, ranges

---

# Question time!

* about this
* about tech
* about careers
* about Optiver
* whatever...

---

Thanks!
